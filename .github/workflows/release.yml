name: Release
on:
 pull_request:
   branches:
     - main
   types:
     - closed
jobs:
  tagging:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/')
    steps:
       - name: Get the version
         id: get_version
         run: |
           echo ::set-output name=TAG::`echo $SOURCE_VERSION | cut -d / -f 2`
         env:
           SOURCE_VERSION: ${{ github.event.pull_request.head.ref }}
       - name: Echo tag
         run: echo ${{ steps.get_version.outputs.TAG }}
       - uses: actions/checkout@v2
       - run: |
           git config --global user.email "masa.hirano.1996@gmail.com"
           git config --global user.name "Masanori HIRANO"
           git fetch origin ${{ github.event.pull_request.head.ref }}
           git checkout main
           git tag -a `echo '${{ github.event.pull_request.head.ref }}' | sed 's/release\///'` -m " "
           git push origin `echo '${{ github.event.pull_request.head.ref }}' | sed 's/release\///'`
           git push --delete origin ${{ github.event.pull_request.head.ref }}
  
  test:
    # The type of runner that the job will run on
    name: final test
    runs-on:  ${{ matrix.platform }}
    strategy:
      max-parallel: 15
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.7, 3.8, 3.9]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install poetry
          poetry install
      - name: Test
        run: |
          poetry run black --check --diff --quiet --skip-magic-trailing-comma .
          poetry run isort --check --force-single-line-imports --quiet .
          poetry run mypy .
          poetry run pytest tests/
  
  releasetest:
    # The type of runner that the job will run on
    name: release test
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9']

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2.2.2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install poetry
        poetry install
    - name: test release
      run: |
        poetry config repositories.testpypi https://test.pypi.org/legacy/
        poetry publish --build -r testpypi --username __token__ --password ${{ secrets.TEST_PYPI_TOKEN }}
  
  releasetestcheck:
    name: release test check
    needs: releasetest
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9']

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Get the version
        id: get_version
        run: |
          echo ::set-output name=TAG::`echo $SOURCE_VERSION | cut -d / -f 2`
        env:
          SOURCE_VERSION: ${{ github.event.pull_request.head.ref }}
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Sleep for 300 seconds
        run: sleep 300s
        shell: bash
      - name: Install test package
        run: |
          python -m pip install -f https://test.pypi.org/simple/slack-transfer/ slack-transfer==${{ steps.get_version.outputs.TAG }}
          python -m pip install pytest
          rm -r slack_transfer
          rm pyproject.toml
      - name: Test
        run: |
          pytest tests/
          
  release:
    name: release
    needs: [releasetestcheck, tagging]
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9']

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: Get the version
      id: get_version
      run: |
        echo ::set-output name=TAG::`echo $SOURCE_VERSION | cut -d / -f 2`
      env:
        SOURCE_VERSION: ${{ github.event.pull_request.head.ref }}
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2.2.2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install poetry
        poetry install
    - name: release
      run: |
        poetry publish --build --username __token__ --password ${{ secrets.PYPI_TOKEN }}
    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.TAG }}
        release_name: ${{ steps.get_version.outputs.TAG }}
        draft: false
        prerelease: false
        body: |
          This release is automatically generated.
          Please see the pull request.
          [${{ github.event.pull_request.html_url }}](${{ github.event.pull_request.html_url }})
    - name: Generate checksum
      run: |
        cd dist; sha256sum * > checksums.txt; cd -
    - name: Upload tar.gz
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/slack-transfer-${{ steps.get_version.outputs.TAG }}.tar.gz
        asset_name: slack_transfer-${{ steps.get_version.outputs.TAG }}.tar.gz
        asset_content_type: application/gzip
    - name: Upload whl
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/slack_transfer-${{ steps.get_version.outputs.TAG }}-py3-none-any.whl
        asset_name: slack_transfer-${{ steps.get_version.outputs.TAG }}-py3-none-any.whl
        asset_content_type: application/x-pywheel+zip
    - name: Upload checksum
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/checksums.txt
        asset_name: slack_transfer-${{ steps.get_version.outputs.TAG }}-checksums.txt
        asset_content_type: text/plain
  exe:
    # The type of runner that the job will run on
    name: making exe
    needs: [release]
    runs-on:  ${{ matrix.platform }}
    strategy:
      max-parallel: 3
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.9]
    steps:
    - name: Get the version
      id: get_version
      run: |
        echo ::set-output name=TAG::`echo $SOURCE_VERSION | cut -d / -f 2`
      env:
        SOURCE_VERSION: ${{ github.event.pull_request.head.ref }}
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2.2.2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel pip-licenses
        python -m pip install poetry
        poetry install --no-dev
        poetry add pyinstaller
    - name: license check
      run: poetry run pip-licenses --allow-only="MIT License;BSD License;ISC License (ISCL);Python Software Foundation License;Apache Software License;Public Domain;Mozilla Public License 2.0 (MPL 2.0);GNU General Public License v2 (GPLv2);GNU General Public License v3 (GPLv3);"
    - name: generate json file
      run: pip-licenses -a -f json --output-file slack_transfer/license.json
    - name: create exe
      run: |
        poetry run pyinstaller slack_transfer/interactive.py --onefile --add-data "slack_transfer/license.json;."
    - name: download license file
      run: |
        wget https://www.gnu.org/licenses/gpl-3.0.txt -o ./dist/LICENSE
    - name: create zip
      run: |
        cd dist; zip -r slack_transfer.zip ./; cd -
    - name: Generate checksum
      run: |
        cd dist; sha256sum slack_transfer.zip > checksums.txt; cd -
    - name: Upload zip
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release.outputs.upload_url }}
        asset_path: dist/slack_transfer.zip
        asset_name: slack_transfer-${{ matrix.platform }}-${{ steps.get_version.outputs.TAG }}.zip
        asset_content_type: application/zip
    - name: Upload checksum
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release.outputs.upload_url }}
        asset_path: dist/checksums.txt
        asset_name: slack_transfer-${{ matrix.platform }}-checksums.txt
        asset_content_type: text/plain
